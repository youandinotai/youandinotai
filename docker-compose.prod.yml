version: '3.8'

services:
  # Main U&I Not AI Dating Application
  uandinotai-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: uandinotai-dating-app
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REPL_ID=${REPL_ID}
      - SESSION_SECRET=${SESSION_SECRET}
      - ISSUER_URL=https://replit.com/oidc
      - REPLIT_DOMAINS=${DOMAIN:-uandinotai.com}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - EMAIL_FROM=${EMAIL_FROM:-noreply@uandinotai.com}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - UPLOADS_DIR=/app/uploads
    volumes:
      - app-uploads:/app/uploads
      - app-logs:/app/logs
    networks:
      - uandinotai-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: uandinotai-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-uandinotai_dating}
      POSTGRES_USER: ${POSTGRES_USER:-uandinotai}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - uandinotai-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-uandinotai} -d ${POSTGRES_DB:-uandinotai_dating}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching and Sessions
  redis:
    image: redis:7-alpine
    container_name: uandinotai-redis
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
      - ./redis.conf:/etc/redis/redis.conf
    networks:
      - uandinotai-network
    ports:
      - "6379:6379"
    command: redis-server /etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: uandinotai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
      - /etc/letsencrypt:/etc/letsencrypt:ro
    networks:
      - uandinotai-network
    depends_on:
      - uandinotai-app
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Automated Database Backup
  backup:
    image: postgres:16-alpine
    container_name: uandinotai-backup
    restart: unless-stopped
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER:-uandinotai}
      POSTGRES_DB: ${POSTGRES_DB:-uandinotai_dating}
    volumes:
      - ./backups:/backups
      - ./backup-scripts:/scripts
    networks:
      - uandinotai-network
    depends_on:
      - postgres
    command: >
      sh -c "
        echo 'Backup service started - waiting for database...'
        sleep 60
        while true; do
          echo 'Creating backup at $(date)'
          pg_dump -h postgres -U $${POSTGRES_USER} -d $${POSTGRES_DB} > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
          echo 'Backup completed'
          find /backups -name '*.sql' -mtime +7 -delete
          echo 'Old backups cleaned up'
          sleep 86400
        done
      "

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  app-uploads:
    driver: local
  app-logs:
    driver: local
  nginx-logs:
    driver: local

networks:
  uandinotai-network:
    driver: bridge