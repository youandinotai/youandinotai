version: '3.8'

services:
  # Main Application
  uandinotai-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: uandinotai-dating-app
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DATABASE_URL=postgresql://${POSTGRES_USER:-uandinotai}:${POSTGRES_PASSWORD:-securepass123}@postgres:5432/${POSTGRES_DB:-uandinotai_dating}
      - REPL_ID=${REPL_ID}
      - SESSION_SECRET=${SESSION_SECRET:-your_session_secret_change_this_32_chars}
      - ISSUER_URL=${ISSUER_URL:-https://replit.com/oidc}
      - REPLIT_DOMAINS=${REPLIT_DOMAINS:-localhost}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - UPLOADS_DIR=/app/uploads
    volumes:
      - app-uploads:/app/uploads
      - app-logs:/app/logs
    networks:
      - uandinotai-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: uandinotai-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-uandinotai_dating}
      POSTGRES_USER: ${POSTGRES_USER:-uandinotai}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-securepass123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - uandinotai-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-uandinotai} -d ${POSTGRES_DB:-uandinotai_dating}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: uandinotai-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redispass123}
    volumes:
      - redis-data:/data
    networks:
      - uandinotai-network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: uandinotai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx-logs:/var/log/nginx
    networks:
      - uandinotai-network
    depends_on:
      - uandinotai-app
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  app-uploads:
    driver: local
  app-logs:
    driver: local
  nginx-logs:
    driver: local

networks:
  uandinotai-network:
    driver: bridge